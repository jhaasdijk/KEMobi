#!/usr/bin/env python3

"""
This script can be used to perform NTT based polynomial multiplication of
two polynomials for the NTRU LPRime 'kem/ntrulpr761' parameter set.

While 761 is not an NTT friendly prime and the reduction polynomial is not
of the form x^n + 1 or x^n - 1, we can use Good's permutation after padding
to size 1536 to perform 3 size 512 NTTs instead. These smaller size - 512
cyclic NTTs are used to multiply polynomials in Z_6984193 [x] / (x^512 - 1).
"""

import random

from lib_common import Goods
from lib_common import NTT
from lib_common import pad
from lib_common import reduce_q

# Define the original and NTT 'suitable' parameters
VAR_Q, VAR_P, NEW_Q = 4591, 761, 6984193
P_0, P_1, P0P1 = 3, 512, 1536

# These are the roots for a size - 512 cyclic NTT, i.e. we are multiplying
# polynomials in Z_6984193 [x] / (x^512 - 1).
roots = [1, 1, 1888710, 1, 1888710, 2249918, 1189439, 1, 1888710, 2249918, 1189439, 2474861, 4822779, 2631832, 5511532, 1, 1888710, 2249918, 1189439, 2474861, 4822779, 2631832, 5511532, 2475826, 4553556, 1718679, 928322, 1896777, 3698636, 6344531, 3657506, 1, 1888710, 2249918, 1189439, 2474861, 4822779, 2631832, 5511532, 2475826, 4553556, 1718679, 928322, 1896777, 3698636, 6344531, 3657506, 2320078, 1989250, 6389597, 3902275, 4857419, 1503708, 6061365, 6764814, 1806736, 476883, 4980051, 995969, 421236, 2268351, 5436934, 2489170, 1, 1888710, 2249918, 1189439, 2474861, 4822779, 2631832, 5511532, 2475826, 4553556, 1718679, 928322, 1896777, 3698636, 6344531, 3657506, 2320078, 1989250, 6389597, 3902275, 4857419, 1503708, 6061365, 6764814, 1806736, 476883, 4980051, 995969, 421236, 2268351, 5436934, 2489170, 6305737, 4210529, 1839665, 6554001, 6497093, 2181925, 3555181, 4977608, 1317002, 542084, 4846884, 1909715, 6713289, 2885340, 5721431, 5929585, 5626193, 6857320, 236096, 4089882, 2275530, 2309241, 212083, 5845994, 4833814, 5592270, 4550547, 6513079, 3085944, 4549880, 1991625, 6498459, 1, 1888710, 2249918, 1189439, 2474861, 4822779, 2631832, 5511532, 2475826, 4553556, 1718679, 928322, 1896777, 3698636, 6344531, 3657506, 2320078, 1989250, 6389597, 3902275, 4857419, 1503708, 6061365, 6764814, 1806736, 476883, 4980051, 995969, 421236, 2268351, 5436934, 2489170, 6305737, 4210529, 1839665, 6554001, 6497093, 2181925, 3555181, 4977608, 1317002, 542084, 4846884, 1909715, 6713289, 2885340, 5721431, 5929585, 5626193, 6857320, 236096, 4089882, 2275530, 2309241, 212083, 5845994, 4833814, 5592270, 4550547, 6513079, 3085944, 4549880, 1991625, 6498459, 5503199, 1118760, 1516650, 1136094, 1305215, 3924598, 4044239, 6251766, 3905570, 978083, 930959, 6064175, 3894385, 2940558, 6629701, 92432, 5801064, 4976760, 5102405, 6225518, 1190023, 4238421, 923827, 1308559, 4878190, 1687037, 888587, 2527449, 1082755, 3564685, 2493111, 6787824, 1355126, 5676487, 862290, 6701195, 1866623, 647018, 6767961, 1144955, 3519122, 2849661, 774651, 435412, 231691, 2496195, 6538397, 23955, 683141, 2407483, 6863121, 6550086, 1450505, 5657528, 6461287, 2972484, 4167428, 3142354, 1373895, 3110809, 2777653, 4425680, 665089, 4244789, 1, 1888710, 2249918, 1189439, 2474861, 4822779, 2631832, 5511532, 2475826, 4553556, 1718679, 928322, 1896777, 3698636, 6344531, 3657506, 2320078, 1989250, 6389597, 3902275, 4857419, 1503708, 6061365, 6764814, 1806736, 476883, 4980051, 995969, 421236, 2268351, 5436934, 2489170, 6305737, 4210529, 1839665, 6554001, 6497093, 2181925, 3555181, 4977608, 1317002, 542084, 4846884, 1909715, 6713289, 2885340, 5721431, 5929585, 5626193, 6857320, 236096, 4089882, 2275530, 2309241, 212083, 5845994, 4833814, 5592270, 4550547, 6513079, 3085944, 4549880, 1991625, 6498459, 5503199, 1118760, 1516650, 1136094, 1305215, 3924598, 4044239, 6251766, 3905570, 978083, 930959, 6064175, 3894385, 2940558, 6629701, 92432, 5801064, 4976760, 5102405, 6225518, 1190023, 4238421, 923827, 1308559, 4878190, 1687037, 888587, 2527449, 1082755, 3564685, 2493111, 6787824, 1355126, 5676487, 862290, 6701195, 1866623, 647018, 6767961, 1144955, 3519122, 2849661, 774651, 435412, 231691, 2496195, 6538397, 23955, 683141, 2407483, 6863121, 6550086, 1450505, 5657528, 6461287, 2972484, 4167428, 3142354, 1373895, 3110809, 2777653, 4425680, 665089, 4244789, 6358, 2590413, 1351380, 5556336, 6763602, 2621612, 6045621, 2624175, 5914879, 2029063, 4083230, 628191, 4991048, 149857, 4813523, 4044651, 440308, 6262170, 4991238, 2810914, 6352749, 6199440, 6365889, 2026918, 5214196, 882352, 3817389, 4692044, 3272569, 6801306, 3255215, 6945715, 2608026, 131613, 5050988, 2642920, 3999892, 2071852, 2992250, 2253181, 6435502, 3362923, 2228956, 3440536, 2688039, 4500902, 3181154, 6611809, 5282741, 3507854, 6481066, 1319217, 3556037, 1380592, 474465, 5938899, 2940212, 6110290, 3850420, 875985, 1833815, 6593827, 409841, 5700727, 5516505, 3167606, 4674360, 1630090, 1335686, 5056688, 4457129, 1685865, 2807945, 2719944, 3425851, 3279290, 1535645, 6367296, 2034203, 1010444, 6625872, 3845790, 6498698, 2421713, 2285215, 2864124, 6969946, 1644259, 5715100, 5444991, 6408202, 5876842, 4726185, 560945, 4065821, 1656445, 4381139, 3779115, 6832508, 2620510, 1845127, 50767, 1082965, 2094784, 4207497, 1147996, 1374993, 2609068, 6410848, 2721314, 1211390, 5637837, 6226625, 4410051, 5469647, 5688122, 3176030, 1969074, 6823713, 6811207, 5463175, 4294752, 4983160, 6273239, 4277870, 6144036, 3199097, 1446710]
roots_inv = [1, 1, 5095483, 1, 5095483, 5794754, 4734275, 1, 5095483, 5794754, 4734275, 1472661, 4352361, 2161414, 4509332, 1, 5095483, 5794754, 4734275, 1472661, 4352361, 2161414, 4509332, 3326687, 639662, 3285557, 5087416, 6055871, 5265514, 2430637, 4508367, 1, 5095483, 5794754, 4734275, 1472661, 4352361, 2161414, 4509332, 3326687, 639662, 3285557, 5087416, 6055871, 5265514, 2430637, 4508367, 4495023, 1547259, 4715842, 6562957, 5988224, 2004142, 6507310, 5177457, 219379, 922828, 5480485, 2126774, 3081918, 594596, 4994943, 4664115, 1, 5095483, 5794754, 4734275, 1472661, 4352361, 2161414, 4509332, 3326687, 639662, 3285557, 5087416, 6055871, 5265514, 2430637, 4508367, 4495023, 1547259, 4715842, 6562957, 5988224, 2004142, 6507310, 5177457, 219379, 922828, 5480485, 2126774, 3081918, 594596, 4994943, 4664115, 485734, 4992568, 2434313, 3898249, 471114, 2433646, 1391923, 2150379, 1138199, 6772110, 4674952, 4708663, 2894311, 6748097, 126873, 1358000, 1054608, 1262762, 4098853, 270904, 5074478, 2137309, 6442109, 5667191, 2006585, 3429012, 4802268, 487100, 430192, 5144528, 2773664, 678456, 1, 5095483, 5794754, 4734275, 1472661, 4352361, 2161414, 4509332, 3326687, 639662, 3285557, 5087416, 6055871, 5265514, 2430637, 4508367, 4495023, 1547259, 4715842, 6562957, 5988224, 2004142, 6507310, 5177457, 219379, 922828, 5480485, 2126774, 3081918, 594596, 4994943, 4664115, 485734, 4992568, 2434313, 3898249, 471114, 2433646, 1391923, 2150379, 1138199, 6772110, 4674952, 4708663, 2894311, 6748097, 126873, 1358000, 1054608, 1262762, 4098853, 270904, 5074478, 2137309, 6442109, 5667191, 2006585, 3429012, 4802268, 487100, 430192, 5144528, 2773664, 678456, 2739404, 6319104, 2558513, 4206540, 3873384, 5610298, 3841839, 2816765, 4011709, 522906, 1326665, 5533688, 434107, 121072, 4576710, 6301052, 6960238, 445796, 4487998, 6752502, 6548781, 6209542, 4134532, 3465071, 5839238, 216232, 6337175, 5117570, 282998, 6121903, 1307706, 5629067, 196369, 4491082, 3419508, 5901438, 4456744, 6095606, 5297156, 2106003, 5675634, 6060366, 2745772, 5794170, 758675, 1881788, 2007433, 1183129, 6891761, 354492, 4043635, 3089808, 920018, 6053234, 6006110, 3078623, 732427, 2939954, 3059595, 5678978, 5848099, 5467543, 5865433, 1480994, 1, 5095483, 5794754, 4734275, 1472661, 4352361, 2161414, 4509332, 3326687, 639662, 3285557, 5087416, 6055871, 5265514, 2430637, 4508367, 4495023, 1547259, 4715842, 6562957, 5988224, 2004142, 6507310, 5177457, 219379, 922828, 5480485, 2126774, 3081918, 594596, 4994943, 4664115, 485734, 4992568, 2434313, 3898249, 471114, 2433646, 1391923, 2150379, 1138199, 6772110, 4674952, 4708663, 2894311, 6748097, 126873, 1358000, 1054608, 1262762, 4098853, 270904, 5074478, 2137309, 6442109, 5667191, 2006585, 3429012, 4802268, 487100, 430192, 5144528, 2773664, 678456, 2739404, 6319104, 2558513, 4206540, 3873384, 5610298, 3841839, 2816765, 4011709, 522906, 1326665, 5533688, 434107, 121072, 4576710, 6301052, 6960238, 445796, 4487998, 6752502, 6548781, 6209542, 4134532, 3465071, 5839238, 216232, 6337175, 5117570, 282998, 6121903, 1307706, 5629067, 196369, 4491082, 3419508, 5901438, 4456744, 6095606, 5297156, 2106003, 5675634, 6060366, 2745772, 5794170, 758675, 1881788, 2007433, 1183129, 6891761, 354492, 4043635, 3089808, 920018, 6053234, 6006110, 3078623, 732427, 2939954, 3059595, 5678978, 5848099, 5467543, 5865433, 1480994, 5537483, 3785096, 840157, 2706323, 710954, 2001033, 2689441, 1521018, 172986, 160480, 5015119, 3808163, 1296071, 1514546, 2574142, 757568, 1346356, 5772803, 4262879, 573345, 4375125, 5609200, 5836197, 2776696, 4889409, 5901228, 6933426, 5139066, 4363683, 151685, 3205078, 2603054, 5327748, 2918372, 6423248, 2258008, 1107351, 575991, 1539202, 1269093, 5339934, 14247, 4120069, 4698978, 4562480, 485495, 3138403, 358321, 5973749, 4949990, 616897, 5448548, 3704903, 3558342, 4264249, 4176248, 5298328, 2527064, 1927505, 5648507, 5354103, 2309833, 3816587, 1467688, 1283466, 6574352, 390366, 5150378, 6108208, 3133773, 873903, 4043981, 1045294, 6509728, 5603601, 3428156, 5664976, 503127, 3476339, 1701452, 372384, 3803039, 2483291, 4296154, 3543657, 4755237, 3621270, 548691, 4731012, 3991943, 4912341, 2984301, 4341273, 1933205, 6852580, 4376167, 38478, 3728978, 182887, 3711624, 2292149, 3166804, 6101841, 1769997, 4957275, 618304, 784753, 631444, 4173279, 1992955, 722023, 6543885, 2939542, 2170670, 6834336, 1993145, 6356002, 2900963, 4955130, 1069314, 4360018, 938572, 4362581, 220591, 1427857, 5632813, 4393780, 6977835]

# Define objects to interact with the implemented Good's and NTT methods
goods = Goods(P_0, P_1, P0P1)
ntt = NTT(NEW_Q, P_1, roots, roots_inv)

# Generate two polynomials A, B
# *. A is a polynomial with randomly generated integer coefficients of Z_q
# *. B is a polynomial with randomly generated integer coefficients of {0, 1}
#    Please note that while B is a small polynomial (all of its coefficients
#    are in {-1, 0, 1}) it is not a short polynomial as more than w of its
#    coefficients are nonzero
A = [random.randint(0, VAR_Q - 1) for _ in range(VAR_P)]
B = [random.randint(0, 1) for _ in range(VAR_P)]

"-- Zero pad polynomials A, B to size P0P1 "
A_PAD = pad(A, P0P1)
B_PAD = pad(B, P0P1)

" -- Perform Good's permutation to obtain P_0 size - P_1 polynomials each "
A_PAD_G = goods.forward(A_PAD)
B_PAD_G = goods.forward(B_PAD)

" -- Perform P_0 size - P_1 forward NTTs "
A_PAD_G_F = [ntt.forward_rec(A_PAD_G[_]) for _ in range(P_0)]
B_PAD_G_F = [ntt.forward_rec(B_PAD_G[_]) for _ in range(P_0)]

" -- Calculate 'point-wise' multiplication of the coefficients "
"""
Note that the 'smaller' polynomial multiplications are not 'normal', as we are
not actually computing the result 'point-wise'. Instead we multiply two degree 
2 polynomials and reduce the result mod (x^3 - 1). E.g.:

( [A[0][0], A[1][0], A[2][0]] * [B[0][0], B[1][0], B[2][0]] ) % (X^3 - 1)
= C[0][0], C[1][0], C[2][0]
"""

# Define variable for storing the result of the computation
C_PAD_G_F = [[0 for _ in range(P_1)] for _ in range(P_0)]

for i in range(P_1):

    # Define an accumulator to store temporary values
    accum = [0 for _ in range(2 * P_0 - 1)]

    # Obtain two degree 2 polynomials from A, B
    poly_a = [A_PAD_G_F[0][i], A_PAD_G_F[1][i], A_PAD_G_F[2][i]]
    poly_b = [B_PAD_G_F[0][i], B_PAD_G_F[1][i], B_PAD_G_F[2][i]]

    # Multiply the two polynomials naively
    for n in range(P_0):
        for m in range(P_0):
            accum[n + m] += poly_a[n] * poly_b[m]

    # Reduce mod (x^3 - 1)
    for ix in range(2 * P_0 - 2, P_0 - 1, -1):
        if accum[ix] > 0:  # x^p is nonzero
            accum[ix - P_0] += accum[ix]  # add x^p into x^0
            accum[ix] = 0  # zero x^p

    # Store the result
    C_PAD_G_F[0][i] = accum[0]
    C_PAD_G_F[1][i] = accum[1]
    C_PAD_G_F[2][i] = accum[2]

" -- Inverse P_0 size - P_1 NTTs "
C_PAD_G = [ntt.inverse_rec(C_PAD_G_F[_]) for _ in range(P_0)]

" -- Undo Good's permutation "
C_PAD = goods.inverse(C_PAD_G)

" -- Reduce mod (x^761 - x - 1) "
for i in range(P0P1 - 1, VAR_P - 1, -1):
    if C_PAD[i] > 0:  # x^p is nonzero
        C_PAD[i - VAR_P + 1] += C_PAD[i]  # add x^p into x^1
        C_PAD[i - VAR_P] += C_PAD[i]  # add x^p into x^0
        C_PAD[i] = 0  # zero x^p

" -- Store the result "
C = reduce_q(C_PAD, VAR_Q)[:VAR_P]

print(f"Zx({A}) * Zx({B}) % (x^{VAR_P} - x - 1) % {VAR_Q} == Zx({C})")
